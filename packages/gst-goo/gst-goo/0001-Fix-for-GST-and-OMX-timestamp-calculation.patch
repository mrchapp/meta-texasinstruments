From 63e7d2eb81fdb127e844f544ba600d537bf5237a Mon Sep 17 00:00:00 2001
From: Israel Cepeda <israel.cepeda@ti.com>
Date: Wed, 19 May 2010 14:58:27 -0500
Subject: [PATCH] Fix for GST and OMX timestamp calculation

---
 src/gstgooaudiofilter.c |   27 +++++++++++++++++++--------
 src/gstgooutils.c       |   17 +++++++++++++++++
 src/gstgooutils.h       |    2 +-
 3 files changed, 37 insertions(+), 9 deletions(-)

diff --git a/src/gstgooaudiofilter.c b/src/gstgooaudiofilter.c
index 9b36e3d..2b445ea 100644
--- a/src/gstgooaudiofilter.c
+++ b/src/gstgooaudiofilter.c
@@ -292,6 +292,11 @@ gst_goo_audio_filter_sink_event (GstPad* pad, GstEvent* event)
 			goo_component_set_state_executing(self->component);
 			ret = gst_pad_push_event (self->srcpad, event);
 			break;
+		case GST_EVENT_SEEK:
+			GST_DEBUG ("Seeking");
+			self->audio_timestamp = GST_CLOCK_TIME_NONE;
+			ret = gst_pad_push_event (self->srcpad, event);
+			break;
 		default:
 			ret = gst_pad_event_default (pad, event);
 			break;
@@ -443,9 +447,6 @@ gst_goo_audio_filter_chain (GstPad* pad, GstBuffer* buffer)
 	GstGooAdapter* adapter = self->adapter;
 	GstFlowReturn ret = GST_FLOW_OK;
 
-	GstClockTime timestamp = GST_BUFFER_TIMESTAMP (buffer);
-	gint64 buffer_stamp = GST_BUFFER_TIMESTAMP (buffer);
-
 	if (goo_port_is_tunneled (self->inport))
 	{
 		/* shall we send a ghost buffer here ? */
@@ -471,12 +472,13 @@ gst_goo_audio_filter_chain (GstPad* pad, GstBuffer* buffer)
 		goto done;
 	}
 
-	if (GST_BUFFER_TIMESTAMP_IS_VALID (buffer))
+	if (GST_GOO_AUDIO_FILTER (self)->audio_timestamp == GST_CLOCK_TIME_NONE)
 	{
-		GST_GOO_AUDIO_FILTER (self)->audio_timestamp =
-			GST_BUFFER_TIMESTAMP (buffer);
+		if (GST_BUFFER_TIMESTAMP_IS_VALID (buffer))
+			GST_GOO_AUDIO_FILTER (self)->audio_timestamp = GST_BUFFER_TIMESTAMP (buffer);
 	}
 
+
 	// XXX maybe all access to 'adapter' needs to be moved to chain2()?  could be weird race
 	// conditions between chain() and chain2() otherwise..
 
@@ -717,13 +719,21 @@ gst_goo_audio_filter_check_fixed_src_caps_default (GstGooAudioFilter* self)
 static gboolean
 gst_goo_audio_filter_timestamp_buffer_default (GstGooAudioFilter* self, GstBuffer *gst_buffer, OMX_BUFFERHEADERTYPE* buffer)
 {
-	GST_BUFFER_TIMESTAMP (gst_buffer) = gst_goo_timestamp_omx2gst (buffer);
+	/* This will need OMX duration calculation */
+	self->duration = gst_goo_duration_omx2gst (buffer);
+
+	GST_BUFFER_TIMESTAMP (gst_buffer) = self->audio_timestamp;
+	GST_BUFFER_DURATION (gst_buffer) = self->duration;
 	PRINT_BUFFER (gst_buffer);
 
-	if (self->audio_timestamp != -1)
+	if (self->audio_timestamp != GST_CLOCK_TIME_NONE)
 	{
 		self->audio_timestamp += self->duration;
 	}
+	else
+	{
+		self->audio_timestamp = self->duration;
+	}
 
 	return TRUE;
 
@@ -855,6 +865,7 @@ gst_goo_audio_filter_init (GstGooAudioFilter* self, GstGooAudioFilterClass* klas
 	priv->process_mode = DEFAULT_PROCESS_MODE;
 	self->nbamr_mime = FALSE;
 	self->wbamr_mime = FALSE;
+	self->audio_timestamp = GST_CLOCK_TIME_NONE;
 
 	self->factory = goo_ti_component_factory_get_instance ();
 
diff --git a/src/gstgooutils.c b/src/gstgooutils.c
index 89e7512..6d6cd9a 100644
--- a/src/gstgooutils.c
+++ b/src/gstgooutils.c
@@ -525,6 +525,23 @@ gst_goo_timestamp_omx2gst (OMX_BUFFERHEADERTYPE *buffer)
 	return GST_CLOCK_TIME_NONE;
 }
 
+/**
+ * Utility function to handle transferring an OMX duration to a Gstreamer
+ * duration
+ */
+GstClockTime
+gst_goo_duration_omx2gst (OMX_BUFFERHEADERTYPE *buffer)
+{
+
+	GstClockTime duration = OMX2GST_DURATION (buffer->nTickCount);
+	if (GST_CLOCK_TIME_IS_VALID (duration))
+	{
+		return duration;
+	}
+	GST_WARNING ("Invalid duration!");
+	return GST_CLOCK_TIME_NONE;
+}
+
 /******************************************************************************/
 /******************************************************************************/
 /******************************************************************************/
diff --git a/src/gstgooutils.h b/src/gstgooutils.h
index ccf5e07..7a455b5 100644
--- a/src/gstgooutils.h
+++ b/src/gstgooutils.h
@@ -34,7 +34,7 @@ GooComponent* gst_goo_util_find_goo_component (GstElement *elem, GType type);
 
 #define GST2OMX_TIMESTAMP(ts) ((OMX_S64) ts / 1000)
 #define OMX2GST_TIMESTAMP(ts) ((guint64) ts * 1000)
-
+#define OMX2GST_DURATION(ts) ((guint64) ts * 1000)
 
 /* for some reason, if user seeks back to beginning, we don't get DISCONT flag */
 #define GST_GOO_UTIL_IS_DISCONT(buffer)  (GST_BUFFER_FLAG_IS_SET ((buffer), GST_BUFFER_FLAG_DISCONT) || (GST_BUFFER_TIMESTAMP ((buffer)) == 0))
-- 
1.7.0.4

