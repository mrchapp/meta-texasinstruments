From 9eb8e64f8143d3cecd51e067e95884b6bae10d71 Mon Sep 17 00:00:00 2001
From: Arnout Vandecappelle <arnout@mind.be>
Date: Wed, 19 Aug 2009 12:22:30 +0200
Subject: [PATCH 1/3] jpegparse: new element

---
 configure.ac                     |    2 +
 gst/jpegparse/Makefile.am        |    9 +
 gst/jpegparse/gstjpegparse.c     |  494 ++++++++++++++++++++++++++++++++++++++
 gst/jpegparse/gstjpegparse.h     |   64 +++++
 tests/check/Makefile.am          |    1 +
 tests/check/elements/jpegparse.c |  187 ++++++++++++++
 6 files changed, 757 insertions(+), 0 deletions(-)
 create mode 100644 gst/jpegparse/Makefile.am
 create mode 100644 gst/jpegparse/gstjpegparse.c
 create mode 100644 gst/jpegparse/gstjpegparse.h
 create mode 100644 tests/check/elements/jpegparse.c

diff --git a/configure.ac b/configure.ac
index bfd3817..27339b4 100644
--- a/configure.ac
+++ b/configure.ac
@@ -269,6 +269,7 @@ AG_GST_CHECK_PLUGIN(frei0r)
 AG_GST_CHECK_PLUGIN(h264parse)
 AG_GST_CHECK_PLUGIN(hdvparse)
 AG_GST_CHECK_PLUGIN(id3tag)
+AG_GST_CHECK_PLUGIN(jpegparse)
 AG_GST_CHECK_PLUGIN(librfb)
 AG_GST_CHECK_PLUGIN(liveadder)
 AG_GST_CHECK_PLUGIN(mpegdemux)
@@ -1742,6 +1743,7 @@ gst/frei0r/Makefile
 gst/h264parse/Makefile
 gst/hdvparse/Makefile
 gst/id3tag/Makefile
+gst/jpegparse/Makefile
 gst/legacyresample/Makefile
 gst/librfb/Makefile
 gst/liveadder/Makefile
diff --git a/gst/jpegparse/Makefile.am b/gst/jpegparse/Makefile.am
new file mode 100644
index 0000000..74e49ee
--- /dev/null
+++ b/gst/jpegparse/Makefile.am
@@ -0,0 +1,9 @@
+plugin_LTLIBRARIES = libgstjpegparse.la
+
+libgstjpegparse_la_SOURCES = gstjpegparse.c
+libgstjpegparse_la_CFLAGS = $(GST_PLUGINS_BASE_CFLAGS) $(GST_CFLAGS)
+libgstjpegparse_la_LIBADD = $(GST_LIBS) $(GST_BASE_LIBS)
+libgstjpegparse_la_LDFLAGS = $(GST_PLUGIN_LDFLAGS)
+libgstjpegparse_la_LIBTOOLFLAGS = --tag=disable-static
+
+noinst_HEADERS = gstjpegparse.h
diff --git a/gst/jpegparse/gstjpegparse.c b/gst/jpegparse/gstjpegparse.c
new file mode 100644
index 0000000..20823e2
--- /dev/null
+++ b/gst/jpegparse/gstjpegparse.c
@@ -0,0 +1,494 @@
+/* GStreamer
+ *
+ * jpegparse: a parser for JPEG streams
+ *
+ * Copyright (C) <2009> Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA 02111-1307, USA.
+ */
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include <string.h>
+
+#include <gst/gst.h>
+
+#include "gstjpegparse.h"
+#include "gst/gst-i18n-plugin.h"
+
+/**
+ * SECTION:element-jpegparse
+ *
+ * Parses a JPEG stream into JPEG images.  It looks for EOI boundaries to split
+ * a continuous stream into single-frame buffers.
+ *
+ * <refsect2>
+ * <title>Example launch line</title>
+ * |[
+ * gst-launch -v souphttpsrc location=... ! jpegparse ! matroskamux ! filesink location=...
+ * ]|
+ * The above pipeline fetches a motion JPEG stream from an IP camera over HTTP
+ * and stores it in a matroska file.
+ * </refsect2>
+ */
+
+static const GstElementDetails gst_jpeg_parse_details =
+GST_ELEMENT_DETAILS ("JPEG stream parser",
+    "Codec/Parser/Video",
+    "Parse JPEG images into single-frame buffers",
+    "Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>");
+
+static GstStaticPadTemplate gst_jpeg_parse_src_pad_template =
+GST_STATIC_PAD_TEMPLATE ("src",
+    GST_PAD_SRC,
+    GST_PAD_ALWAYS,
+    GST_STATIC_CAPS ("image/jpeg, parsed = true")
+    );
+
+static GstStaticPadTemplate gst_jpeg_parse_sink_pad_template =
+GST_STATIC_PAD_TEMPLATE ("sink",
+    GST_PAD_SINK,
+    GST_PAD_ALWAYS,
+    GST_STATIC_CAPS ("image/jpeg, parsed = false")
+    );
+
+GST_DEBUG_CATEGORY_STATIC (jpeg_parse_debug);
+#define GST_CAT_DEFAULT jpeg_parse_debug
+
+static GstElementClass *parent_class;   /* NULL */
+
+static void gst_jpeg_parse_base_init (gpointer g_class);
+static void gst_jpeg_parse_class_init (GstJpegParseClass * klass);
+static void gst_jpeg_parse_dispose (GObject * object);
+
+static GstFlowReturn gst_jpeg_parse_chain (GstPad * pad, GstBuffer * buffer);
+static gboolean gst_jpeg_parse_sink_event (GstPad * pad, GstEvent * event);
+static gboolean gst_jpeg_parse_src_event (GstPad * pad, GstEvent * event);
+static GstStateChangeReturn gst_jpeg_parse_change_state (GstElement * element,
+    GstStateChange transition);
+
+#define DEBUG_INIT(bla) \
+  GST_DEBUG_CATEGORY_INIT (jpeg_parse_debug, "jpegparse", 0, "JPEG parser");
+
+GST_BOILERPLATE_FULL (GstJpegParse, gst_jpeg_parse, GstElement,
+    GST_TYPE_ELEMENT, DEBUG_INIT);
+
+static void
+gst_jpeg_parse_base_init (gpointer g_class)
+{
+  GstElementClass *element_class = GST_ELEMENT_CLASS (g_class);
+
+  gst_element_class_add_pad_template (element_class,
+      gst_static_pad_template_get (&gst_jpeg_parse_src_pad_template));
+  gst_element_class_add_pad_template (element_class,
+      gst_static_pad_template_get (&gst_jpeg_parse_sink_pad_template));
+  gst_element_class_set_details (element_class, &gst_jpeg_parse_details);
+}
+
+static void
+gst_jpeg_parse_class_init (GstJpegParseClass * klass)
+{
+  GstElementClass *gstelement_class;
+  GObjectClass *gobject_class;
+
+  gstelement_class = (GstElementClass *) klass;
+  gobject_class = (GObjectClass *) klass;
+
+  parent_class = g_type_class_peek_parent (klass);
+
+  gobject_class->dispose = gst_jpeg_parse_dispose;
+
+  gstelement_class->change_state =
+      GST_DEBUG_FUNCPTR (gst_jpeg_parse_change_state);
+}
+
+static void
+gst_jpeg_parse_reset (GstJpegParse * parse)
+{
+  if (parse->adapter) {
+    gst_adapter_clear (parse->adapter);
+    gst_object_unref (parse->adapter);
+    parse->adapter = NULL;
+  }
+  parse->srcpad = NULL;
+  parse->sinkpad = NULL;
+  parse->timestamp = GST_CLOCK_TIME_NONE;
+}
+
+static void
+gst_jpeg_parse_init (GstJpegParse * parse, GstJpegParseClass * g_class)
+{
+  gst_jpeg_parse_reset (parse);
+
+  /* create the sink and src pads */
+  parse->sinkpad =
+      gst_pad_new_from_static_template (&gst_jpeg_parse_sink_pad_template,
+      "sink");
+  gst_pad_set_chain_function (parse->sinkpad,
+      GST_DEBUG_FUNCPTR (gst_jpeg_parse_chain));
+  gst_pad_set_event_function (parse->sinkpad,
+      GST_DEBUG_FUNCPTR (gst_jpeg_parse_sink_event));
+  gst_pad_set_caps (parse->sinkpad,
+      gst_static_pad_template_get_caps (&gst_jpeg_parse_sink_pad_template));
+  gst_pad_use_fixed_caps (parse->sinkpad);
+  gst_element_add_pad (GST_ELEMENT (parse), parse->sinkpad);
+
+  parse->srcpad =
+      gst_pad_new_from_static_template (&gst_jpeg_parse_src_pad_template,
+      "src");
+  gst_pad_set_event_function (parse->srcpad,
+      GST_DEBUG_FUNCPTR (gst_jpeg_parse_src_event));
+  gst_pad_set_caps (parse->srcpad,
+      gst_static_pad_template_get_caps (&gst_jpeg_parse_src_pad_template));
+  gst_pad_use_fixed_caps (parse->srcpad);
+  gst_element_add_pad (GST_ELEMENT (parse), parse->srcpad);
+
+  parse->adapter = gst_adapter_new ();
+}
+
+static void
+gst_jpeg_parse_dispose (GObject * object)
+{
+  GstJpegParse *parse = GST_JPEG_PARSE (object);
+
+  gst_jpeg_parse_reset (parse);
+
+  G_OBJECT_CLASS (parent_class)->dispose (object);
+}
+
+/* Flush everything until the next JPEG header.  The header is considered
+ * to be the a start marker (0xff 0xd8) followed by any other marker (0xff ...).
+ * Returns TRUE if the header was found, FALSE if more data is needed. */
+static gboolean
+gst_jpeg_parse_skip_to_jpeg_header (GstJpegParse * parse)
+{
+  /* When this element was written,  gst_adapter_masked_scan_uint32() had just
+   * been added, so we still support the manual scanning method too. */
+#if GST_CHECK_VERSION(0,10,24) || \
+  (GST_CHECK_VERSION(0,10,23) && GST_VERSION_NANO >= 1)
+  guint available, flush;
+  gboolean ret = TRUE;
+
+  available = gst_adapter_available (parse->adapter);
+  if (available < 4)
+    return FALSE;
+  flush = gst_adapter_masked_scan_uint32 (parse->adapter, 0xffffff00,
+      0xffd8ff00, 0, available);
+  if (flush == -1) {
+    flush = available - 3;      /* Last 3 bytes + 1 more may match header. */
+    ret = FALSE;
+  }
+  if (flush > 0) {
+    GST_LOG_OBJECT (parse, "Skipping %u bytes.", flush);
+    gst_adapter_flush (parse->adapter, flush);
+  }
+  return ret;
+
+#else /* GST_CHECK_VERSION(0,10,24) */
+  guint size;
+
+  while ((size = gst_adapter_available (parse->adapter)) >= 3) {
+    const guint8 *data, *marker;
+    guint off;
+    data = gst_adapter_peek (parse->adapter, size);
+
+    if (data[0] == 0xff && data[1] == 0xd8 && data[2] == 0xff)
+      return TRUE;
+
+    marker = memchr (data + 1, 0xff, size - 1 - 2);
+    if (marker == NULL) {
+      off = size - 1;           /* keep last byte */
+    } else {
+      off = marker - data;
+    }
+
+    GST_LOG_OBJECT (parse, "Skipping %u bytes.", off);
+    gst_adapter_flush (parse->adapter, off);
+  }
+
+  return FALSE;
+#endif /* GST_CHECK_VERSION(0,10,24) */
+}
+
+static inline gboolean
+gst_jpeg_parse_parse_tag_has_entropy_segment (guint8 tag)
+{
+  if (tag == 0xda || (tag >= 0xd0 && tag <= 0xd7))
+    return TRUE;
+  return FALSE;
+}
+
+/* Find the next marker, based on the marker at data.  data[0] must be 0xff.
+ * Returns the offset of the next valid marker.  Returns -1 if adapter doesn't
+ * have enough data. */
+static guint
+gst_jpeg_parse_match_next_marker (const guint8 * data, guint size)
+{
+  guint marker_len;
+  guint8 tag;
+
+  g_return_val_if_fail (data[0] == 0xff, -1);
+  g_return_val_if_fail (size >= 2, -1);
+  tag = data[1];
+
+  if (tag >= 0xd0 && tag <= 0xd9)
+    marker_len = 2;
+  else if (G_UNLIKELY (size < 4))
+    return -1;
+  else
+    marker_len = GST_READ_UINT16_BE (data + 2) + 2;
+  /* Need marker_len for this marker, plus two for the next marker. */
+  if (G_UNLIKELY (marker_len + 2 >= size))
+    return -1;
+  if (G_UNLIKELY (gst_jpeg_parse_parse_tag_has_entropy_segment (tag))) {
+    while (!(data[marker_len] == 0xff && data[marker_len + 1] != 0x00)) {
+      if (G_UNLIKELY (marker_len + 2 >= size))
+        return -1;
+      ++marker_len;
+    }
+  }
+  return marker_len;
+}
+
+/* Returns the position beyond the end marker, -1 if insufficient data and -2
+   if marker lengths are inconsistent. data must start with 0xff. */
+static guint
+gst_jpeg_parse_find_end_marker (GstJpegParse * parse, const guint8 * data,
+    guint size)
+{
+  guint offset = 0;
+
+  while (1) {
+    guint marker_len;
+    guint8 tag;
+
+    if (offset + 1 >= size)
+      return -1;
+
+    if (data[offset] != 0xff)
+      return -2;
+
+    /* Skip over extra 0xff */
+    while (G_UNLIKELY ((tag = data[offset + 1]) == 0xff)) {
+      ++offset;
+      if (G_UNLIKELY (offset + 1 >= size))
+        return -1;
+    }
+    /* Check for EOI */
+    if (G_UNLIKELY (tag == 0xd9)) {
+      GST_DEBUG_OBJECT (parse, "EOI at %u", offset);
+      return offset + 2;
+    }
+    /* Skip over this marker. */
+    marker_len = gst_jpeg_parse_match_next_marker (data + offset,
+        size - offset);
+    if (G_UNLIKELY (marker_len == -1)) {
+      return -1;
+    } else {
+      GST_LOG_OBJECT (parse, "At offset %u: marker %02x, length %u", offset,
+          tag, marker_len);
+      offset += marker_len;
+    }
+  }
+}
+
+/* scan until EOI, by interpreting marker + length */
+static guint
+gst_jpeg_parse_get_image_length (GstJpegParse * parse)
+{
+  const guint8 *data;
+  guint size, offset, start = 2;
+
+  size = gst_adapter_available (parse->adapter);
+  if (size < 4) {
+    GST_DEBUG_OBJECT (parse, "Insufficient data for end marker.");
+    return 0;
+  }
+  data = gst_adapter_peek (parse->adapter, size);
+
+  g_return_val_if_fail (data[0] == 0xff && data[1] == 0xd8, 0);
+
+  GST_DEBUG_OBJECT (parse, "Parsing jpeg image data (%u bytes)", size);
+
+  /* skip start marker */
+  offset = gst_jpeg_parse_find_end_marker (parse, data + 2, size - 2);
+
+  if (offset == -1) {
+    GST_DEBUG_OBJECT (parse, "Insufficient data.");
+    return 0;
+  } else if (G_UNLIKELY (offset == -2)) {
+    GST_DEBUG_OBJECT (parse, "Lost sync, resyncing.");
+    /* FIXME does this make sense at all?  This can only happen for broken
+     * images, and the most likely breakage is that it's truncated.  In that
+     * case, however, we should be looking for a new start marker... */
+    while (offset == -2 || offset == -1) {
+      start++;
+      while (start + 1 < size && data[start] != 0xff)
+        start++;
+      if (G_UNLIKELY (start + 1 >= size)) {
+        GST_DEBUG_OBJECT (parse, "Insufficient data while resyncing.");
+        return 0;
+      }
+      GST_LOG_OBJECT (parse, "Resyncing from offset %u.", start);
+      offset = gst_jpeg_parse_find_end_marker (parse, data + start, size -
+          start);
+    }
+  }
+
+  return start + offset;
+}
+
+static GstFlowReturn
+gst_jpeg_parse_push_buffer (GstJpegParse * parse, guint len)
+{
+  GstBuffer *outbuf;
+  GstFlowReturn ret = GST_FLOW_OK;
+
+  outbuf = gst_adapter_take_buffer (parse->adapter, len);
+  if (outbuf == NULL) {
+    GST_ERROR_OBJECT (parse, "Failed to take buffer of size %u", len);
+    return GST_FLOW_ERROR;
+  }
+  GST_BUFFER_TIMESTAMP (outbuf) = parse->timestamp;
+  gst_buffer_set_caps (outbuf, GST_PAD_CAPS (parse->srcpad));
+  parse->timestamp = GST_CLOCK_TIME_NONE;
+
+  /* FIXME set duration? */
+
+  GST_LOG_OBJECT (parse, "pushing buffer (ts=%" GST_TIME_FORMAT ", len=%u)",
+      GST_TIME_ARGS (GST_BUFFER_TIMESTAMP (outbuf)), len);
+
+  ret = gst_pad_push (parse->srcpad, outbuf);
+
+  return ret;
+}
+
+static GstFlowReturn
+gst_jpeg_parse_chain (GstPad * pad, GstBuffer * buf)
+{
+  GstJpegParse *parse;
+  guint len;
+  GstClockTime timestamp;
+  GstFlowReturn ret = GST_FLOW_OK;
+
+  parse = GST_JPEG_PARSE (GST_PAD_PARENT (pad));
+
+  timestamp = GST_BUFFER_TIMESTAMP (buf);
+
+  gst_adapter_push (parse->adapter, buf);
+
+  while (ret == GST_FLOW_OK && gst_jpeg_parse_skip_to_jpeg_header (parse)) {
+    if (G_UNLIKELY (!GST_CLOCK_TIME_IS_VALID (parse->timestamp)))
+      parse->timestamp = timestamp;
+
+    len = gst_jpeg_parse_get_image_length (parse);
+    if (len == 0)
+      return GST_FLOW_OK;
+
+    ret = gst_jpeg_parse_push_buffer (parse, len);
+  }
+
+  GST_DEBUG_OBJECT (parse, "No start marker found, waiting for more data.");
+  return ret;
+}
+
+static gboolean
+gst_jpeg_parse_src_event (GstPad * pad, GstEvent * event)
+{
+  GstJpegParse *parse;
+  gboolean res;
+
+  parse = GST_JPEG_PARSE (gst_pad_get_parent (pad));
+
+  GST_DEBUG_OBJECT (parse, "event : %s", GST_EVENT_TYPE_NAME (event));
+
+  switch (GST_EVENT_TYPE (event)) {
+    case GST_EVENT_EOS:{
+      /* Push the remaining data, even though it's incomplete */
+      guint available = gst_adapter_available (parse->adapter);
+
+      if (available > 0)
+        gst_jpeg_parse_push_buffer (parse, available);
+      break;
+    }
+    case GST_EVENT_NEWSEGMENT:
+      /* Discard any data in the adapter.  There should have been an EOS before
+       * to flush it. */
+      gst_adapter_clear (parse->adapter);
+      parse->timestamp = GST_CLOCK_TIME_NONE;
+      break;
+    default:
+      break;
+  }
+
+  res = gst_pad_push_event (parse->sinkpad, event);
+
+  gst_object_unref (parse);
+  return res;
+}
+
+static gboolean
+gst_jpeg_parse_sink_event (GstPad * pad, GstEvent * event)
+{
+  gboolean ret = TRUE;
+  GstJpegParse *parse = GST_JPEG_PARSE (GST_OBJECT_PARENT (pad));
+
+  ret = gst_pad_push_event (parse->srcpad, event);
+
+  return ret;
+}
+
+static GstStateChangeReturn
+gst_jpeg_parse_change_state (GstElement * element, GstStateChange transition)
+{
+  GstStateChangeReturn ret;
+  GstJpegParse *parse;
+
+  parse = GST_JPEG_PARSE (element);
+
+  ret = GST_ELEMENT_CLASS (parent_class)->change_state (element, transition);
+  if (ret != GST_STATE_CHANGE_SUCCESS)
+    return ret;
+
+  switch (transition) {
+    case GST_STATE_CHANGE_PAUSED_TO_READY:
+      gst_adapter_clear (parse->adapter);
+      parse->timestamp = GST_CLOCK_TIME_NONE;
+      break;
+    default:
+      break;
+  }
+
+  return ret;
+}
+
+static gboolean
+plugin_init (GstPlugin * plugin)
+{
+
+  if (!gst_element_register (plugin, "jpegparse", GST_RANK_PRIMARY + 1,
+          GST_TYPE_JPEG_PARSE))
+    return FALSE;
+
+  return TRUE;
+}
+
+GST_PLUGIN_DEFINE (GST_VERSION_MAJOR,
+    GST_VERSION_MINOR,
+    "jpeg",
+    "JPEG parser",
+    plugin_init, VERSION, "LGPL", GST_PACKAGE_NAME, GST_PACKAGE_ORIGIN)
diff --git a/gst/jpegparse/gstjpegparse.h b/gst/jpegparse/gstjpegparse.h
new file mode 100644
index 0000000..5d6ce1d
--- /dev/null
+++ b/gst/jpegparse/gstjpegparse.h
@@ -0,0 +1,64 @@
+/* GStreamer
+ *
+ * jpegparse: a parser for JPEG streams
+ *
+ * Copyright (C) <2009> Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA 02111-1307, USA.
+ */
+
+#ifndef __GST_JPEG_PARSE_H__
+#define __GST_JPEG_PARSE_H__
+
+#include <gst/gst.h>
+#include <gst/base/gstadapter.h>
+
+G_BEGIN_DECLS
+
+#define GST_TYPE_JPEG_PARSE \
+  (gst_jpeg_parse_get_type())
+#define GST_JPEG_PARSE(obj) \
+  (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_JPEG_PARSE,GstJpegParse))
+#define GST_JPEG_PARSE_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_CAST((klass),GST_TYPE_JPEG_PARSE,GstJpegParseClass))
+#define GST_IS_JPEG_PARSE(obj) \
+  (G_TYPE_CHECK_INSTANCE_TYPE((obj),GST_TYPE_JPEG_PARSE))
+#define GST_IS_JPEG_PARSE_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_TYPE((klass),GST_TYPE_JPEG_PARSE))
+
+typedef struct _GstJpegParse           GstJpegParse;
+typedef struct _GstJpegParseClass      GstJpegParseClass;
+
+struct _GstJpegParse {
+  GstElement element;
+
+  /* pads */
+  GstPad      *sinkpad;
+  GstPad      *srcpad;
+
+  GstAdapter  *adapter;
+  GstClockTime timestamp;
+};
+
+struct _GstJpegParseClass {
+  GstElementClass  parent_class;
+};
+
+GType gst_jpeg_parse_get_type(void);
+
+G_END_DECLS
+
+#endif
diff --git a/tests/check/Makefile.am b/tests/check/Makefile.am
index c4efed6..e904e00 100644
--- a/tests/check/Makefile.am
+++ b/tests/check/Makefile.am
@@ -105,6 +105,7 @@ check_PROGRAMS = \
 	elements/amrparse \
 	elements/asfmux \
 	elements/legacyresample \
+	elements/jpegparse \
 	elements/qtmux \
 	elements/selector \
 	elements/shapewipe \
diff --git a/tests/check/elements/jpegparse.c b/tests/check/elements/jpegparse.c
new file mode 100644
index 0000000..8c93c3b
--- /dev/null
+++ b/tests/check/elements/jpegparse.c
@@ -0,0 +1,187 @@
+/* GStreamer
+ *
+ * unit test for jpegparse
+ *
+ * Copyright (C) <2009> Arnout Vandecappelle (Essensium/Mind) <arnout@mind.be>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA 02111-1307, USA.
+ */
+
+#include <unistd.h>
+
+#include <gst/check/gstcheck.h>
+
+/* This test doesn't use actual JPEG data, but some fake data that we know
+   will trigger certain paths in jpegparse. */
+
+guint8 test_data_garbage[] = { 0x00, 0x01, 0xff, 0x32, 0x00, 0xff };
+guint8 test_data_short_frame[] = { 0xff, 0xd8, 0xff, 0xd9 };
+
+guint8 test_data_normal_frame[] = { 0xff, 0xd8, 0xff, 0x12, 0x00, 0x03, 0x33,
+  0xff, 0xd9
+};
+
+guint8 test_data_entropy[] = { 0xff, 0xd8, 0xff, 0xda, 0x00, 0x04, 0x22, 0x33,
+  0x44, 0xff, 0x00, 0x55, 0xff, 0x04, 0x00, 0x04, 0x22, 0x33, 0xff, 0xd9
+};
+guint8 test_data_ff[] = { 0xff, 0xff };
+
+guint8 test_data_extra_ff[] = { 0xff, 0xd8, 0xff, 0xff, 0xff, 0x12, 0x00, 0x03,
+  0x33, 0xff, 0xff, 0xff, 0xd9
+};
+
+static GList *
+_make_buffers_in (GList * buffer_in, guint8 * test_data, gsize test_data_size)
+{
+  GstBuffer *buffer;
+  gsize i;
+
+  for (i = 0; i < test_data_size; i++) {
+    buffer = gst_buffer_new ();
+    gst_buffer_set_data (buffer, test_data + i, 1);
+    gst_buffer_set_caps (buffer, gst_caps_new_simple ("image/jpeg", "parsed",
+            G_TYPE_BOOLEAN, FALSE, NULL));
+    buffer_in = g_list_append (buffer_in, buffer);
+  }
+  return buffer_in;
+}
+
+#define make_buffers_in(buffer_in, test_data) \
+    _make_buffers_in(buffer_in, test_data, sizeof(test_data))
+
+static GList *
+_make_buffers_out (GList * buffer_out, guint8 * test_data, gsize test_data_size)
+{
+  GstBuffer *buffer;
+
+  buffer = gst_buffer_new ();
+  gst_buffer_set_data (buffer, test_data, test_data_size);
+  gst_buffer_set_caps (buffer, gst_caps_new_simple ("image/jpeg", "parsed",
+          G_TYPE_BOOLEAN, TRUE, NULL));
+  buffer_out = g_list_append (buffer_out, buffer);
+  return buffer_out;
+}
+
+#define make_buffers_out(buffer_out, test_data) \
+    _make_buffers_out(buffer_out, test_data, sizeof(test_data))
+
+GST_START_TEST (test_parse_single_byte)
+{
+  GList *buffer_in = NULL, *buffer_out = NULL;
+
+  /* Push the data byte by byte, injecting some garbage. */
+  buffer_in = make_buffers_in (buffer_in, test_data_garbage);
+  buffer_in = make_buffers_in (buffer_in, test_data_short_frame);
+  buffer_in = make_buffers_in (buffer_in, test_data_garbage);
+  buffer_in = make_buffers_in (buffer_in, test_data_normal_frame);
+  buffer_in = make_buffers_in (buffer_in, test_data_ff);
+  buffer_in = make_buffers_in (buffer_in, test_data_entropy);
+  buffer_in = make_buffers_in (buffer_in, test_data_extra_ff);
+
+  buffer_out = make_buffers_out (buffer_out, test_data_short_frame);
+  buffer_out = make_buffers_out (buffer_out, test_data_normal_frame);
+  buffer_out = make_buffers_out (buffer_out, test_data_entropy);
+  buffer_out = make_buffers_out (buffer_out, test_data_extra_ff);
+  gst_check_element_push_buffer_list ("jpegparse", buffer_in, buffer_out,
+      GST_FLOW_OK);
+}
+
+GST_END_TEST;
+
+
+
+GST_START_TEST (test_parse_all_in_one_buf)
+{
+  GList *buffer_in = NULL, *buffer_out = NULL;
+  GstBuffer *buffer = NULL;
+  gsize total_size = 0;
+  gsize offset = 0;
+
+  /* Push the data in a single buffer, injecting some garbage. */
+  total_size += sizeof (test_data_garbage);
+  total_size += sizeof (test_data_short_frame);
+  total_size += sizeof (test_data_garbage);
+  total_size += sizeof (test_data_normal_frame);
+  total_size += sizeof (test_data_ff);
+  total_size += sizeof (test_data_entropy);
+  total_size += sizeof (test_data_extra_ff);
+  buffer = gst_buffer_new_and_alloc (total_size);
+  memcpy (GST_BUFFER_DATA (buffer) + offset, test_data_garbage,
+      sizeof (test_data_garbage));
+  offset += sizeof (test_data_garbage);
+  memcpy (GST_BUFFER_DATA (buffer) + offset, test_data_short_frame,
+      sizeof (test_data_short_frame));
+  offset += sizeof (test_data_short_frame);
+  memcpy (GST_BUFFER_DATA (buffer) + offset, test_data_garbage,
+      sizeof (test_data_garbage));
+  offset += sizeof (test_data_garbage);
+  memcpy (GST_BUFFER_DATA (buffer) + offset, test_data_normal_frame,
+      sizeof (test_data_normal_frame));
+  offset += sizeof (test_data_normal_frame);
+  memcpy (GST_BUFFER_DATA (buffer) + offset, test_data_ff,
+      sizeof (test_data_ff));
+  offset += sizeof (test_data_ff);
+  memcpy (GST_BUFFER_DATA (buffer) + offset, test_data_entropy,
+      sizeof (test_data_entropy));
+  offset += sizeof (test_data_entropy);
+  memcpy (GST_BUFFER_DATA (buffer) + offset, test_data_extra_ff,
+      sizeof (test_data_extra_ff));
+  offset += sizeof (test_data_extra_ff);
+
+  gst_buffer_set_caps (buffer, gst_caps_new_simple ("image/jpeg", "parsed",
+          G_TYPE_BOOLEAN, FALSE, NULL));
+  GST_LOG ("Pushing single buffer of %u bytes.", total_size);
+  buffer_in = g_list_append (buffer_in, buffer);
+
+  buffer_out = make_buffers_out (buffer_out, test_data_short_frame);
+  buffer_out = make_buffers_out (buffer_out, test_data_normal_frame);
+  buffer_out = make_buffers_out (buffer_out, test_data_entropy);
+  buffer_out = make_buffers_out (buffer_out, test_data_extra_ff);
+  gst_check_element_push_buffer_list ("jpegparse", buffer_in, buffer_out,
+      GST_FLOW_OK);
+}
+
+GST_END_TEST;
+
+Suite *
+jpegparse_suite (void)
+{
+  Suite *s = suite_create ("jpegparse");
+  TCase *tc_chain = tcase_create ("jpegparse");
+
+  suite_add_tcase (s, tc_chain);
+  tcase_add_test (tc_chain, test_parse_single_byte);
+  tcase_add_test (tc_chain, test_parse_all_in_one_buf);
+
+  return s;
+}
+
+int
+main (int argc, char **argv)
+{
+  int nf;
+
+  Suite *s = jpegparse_suite ();
+  SRunner *sr = srunner_create (s);
+
+  gst_check_init (&argc, &argv);
+
+  srunner_run_all (sr, CK_NORMAL);
+  nf = srunner_ntests_failed (sr);
+  srunner_free (sr);
+
+  return nf;
+}
-- 
1.6.3.1

