Index: git/Makefile.am
===================================================================
--- git.orig/Makefile.am	2010-01-04 11:27:03.000000000 -0600
+++ git/Makefile.am	2010-01-04 16:35:34.000000000 -0600
@@ -2,9 +2,9 @@
 
 SUBDIRS = 			\
 	gst		 	\
-	module			\
 	common 			\
-	m4
+	m4			\
+	po
 
 DIST_SUBDIRS = 			\
 	gst			\
Index: git/configure.ac
===================================================================
--- git.orig/configure.ac	2010-01-04 11:27:03.000000000 -0600
+++ git/configure.ac	2010-01-04 16:35:34.000000000 -0600
@@ -173,22 +173,6 @@
 
 dnl *** set variables based on configure arguments ***
 
-AC_ARG_WITH(kpath,[  --with-kpath             specify the path to the kernel modules],[
-  kpath="$withval"
-],[
-  echo "error, --with-kpath must be specified"
-  exit 1
-])
-AC_SUBST(kpath)
-
-AC_ARG_WITH(gsdk,[  --with-gsdk             specify the path to the GFX DDK],[
-  gsdk="$withval"
-],[
-  echo "error, --with-gsdk must be specified"
-  exit 1
-])
-AC_SUBST(gsdk)
-
 dnl set license and copyright notice
 GST_LICENSE="LGPL"
 AC_DEFINE_UNQUOTED(GST_LICENSE, "$GST_LICENSE", [GStreamer license])
@@ -281,12 +265,9 @@
 Makefile
 gst/Makefile
 gst/bc/Makefile
-module/Makefile
-module/Kbuild
 po/Makefile.in
 common/Makefile
 common/m4/Makefile
-m4/Makefile
 )
 AC_OUTPUT
 
Index: git/gst/bc/gstbcbufferpool.c
===================================================================
--- git.orig/gst/bc/gstbcbufferpool.c	2010-01-04 16:38:22.000000000 -0600
+++ git/gst/bc/gstbcbufferpool.c	2010-01-04 16:38:26.000000000 -0600
@@ -34,7 +34,7 @@
 #include <gst/video/video.h>
 #include "gstbcbufferpool.h"
 
-#include "bc_cat.h"
+#include "bc_cat_local.h"
 
 GST_DEBUG_CATEGORY_EXTERN (bcsink_debug);
 #define GST_CAT_DEFAULT bcsink_debug
Index: git/gst/bc/gstbcsink.c
===================================================================
--- git.orig/gst/bc/gstbcsink.c	2010-01-04 16:38:31.000000000 -0600
+++ git/gst/bc/gstbcsink.c	2010-01-04 16:38:37.000000000 -0600
@@ -44,7 +44,7 @@
 #include <gst/video/video.h>
 #include "gstbcsink.h"
 
-#include "bc_cat.h"
+#include "bc_cat_local.h"
 
 #include <string.h>
 #include <fcntl.h>
Index: git/gst/bc/bc_cat_local.h
===================================================================
--- /dev/null	2008-05-19 16:38:38.000000000 -0500
+++ git/gst/bc/bc_cat_local.h	2010-01-04 12:34:28.000000000 -0600
@@ -0,0 +1,222 @@
+#ifndef __BC_CAT_LOCAL_H__
+#define __BC_CAT_LOCAL_H__
+
+typedef enum _PVRSRV_PIXEL_FORMAT_ {
+	
+	PVRSRV_PIXEL_FORMAT_UNKNOWN			=  0,
+	PVRSRV_PIXEL_FORMAT_RGB565			=  1,
+	PVRSRV_PIXEL_FORMAT_RGB555			=  2,
+	PVRSRV_PIXEL_FORMAT_RGB888			=  3,	
+	PVRSRV_PIXEL_FORMAT_BGR888			=  4,	
+	PVRSRV_PIXEL_FORMAT_GREY_SCALE		=  8,
+	PVRSRV_PIXEL_FORMAT_PAL12			= 13,
+	PVRSRV_PIXEL_FORMAT_PAL8			= 14,
+	PVRSRV_PIXEL_FORMAT_PAL4			= 15,
+	PVRSRV_PIXEL_FORMAT_PAL2			= 16,
+	PVRSRV_PIXEL_FORMAT_PAL1			= 17,
+	PVRSRV_PIXEL_FORMAT_ARGB1555		= 18,
+	PVRSRV_PIXEL_FORMAT_ARGB4444		= 19, 
+	PVRSRV_PIXEL_FORMAT_ARGB8888		= 20,
+	PVRSRV_PIXEL_FORMAT_ABGR8888		= 21,
+	PVRSRV_PIXEL_FORMAT_YV12			= 22,
+	PVRSRV_PIXEL_FORMAT_I420			= 23,
+    PVRSRV_PIXEL_FORMAT_IMC2            = 25,
+	PVRSRV_PIXEL_FORMAT_XRGB8888,
+	PVRSRV_PIXEL_FORMAT_XBGR8888,
+	PVRSRV_PIXEL_FORMAT_XRGB4444,
+	PVRSRV_PIXEL_FORMAT_ARGB8332,
+	PVRSRV_PIXEL_FORMAT_A2RGB10,		
+	PVRSRV_PIXEL_FORMAT_A2BGR10,		
+	PVRSRV_PIXEL_FORMAT_P8,
+	PVRSRV_PIXEL_FORMAT_L8,
+	PVRSRV_PIXEL_FORMAT_A8L8,
+	PVRSRV_PIXEL_FORMAT_A4L4,
+	PVRSRV_PIXEL_FORMAT_L16,
+	PVRSRV_PIXEL_FORMAT_L6V5U5,
+	PVRSRV_PIXEL_FORMAT_V8U8,
+	PVRSRV_PIXEL_FORMAT_V16U16,
+	PVRSRV_PIXEL_FORMAT_QWVU8888,
+	PVRSRV_PIXEL_FORMAT_XLVU8888,
+	PVRSRV_PIXEL_FORMAT_QWVU16,
+	PVRSRV_PIXEL_FORMAT_D16,
+	PVRSRV_PIXEL_FORMAT_D24S8,
+	PVRSRV_PIXEL_FORMAT_D24X8,
+
+	
+	PVRSRV_PIXEL_FORMAT_ABGR16,
+	PVRSRV_PIXEL_FORMAT_ABGR16F,
+	PVRSRV_PIXEL_FORMAT_ABGR32,
+	PVRSRV_PIXEL_FORMAT_ABGR32F,
+	PVRSRV_PIXEL_FORMAT_B10GR11,
+	PVRSRV_PIXEL_FORMAT_GR88,
+	PVRSRV_PIXEL_FORMAT_BGR32,
+	PVRSRV_PIXEL_FORMAT_GR32,
+	PVRSRV_PIXEL_FORMAT_E5BGR9,
+
+	
+	PVRSRV_PIXEL_FORMAT_DXT1,
+	PVRSRV_PIXEL_FORMAT_DXT23,
+	PVRSRV_PIXEL_FORMAT_DXT45,	
+
+	
+	PVRSRV_PIXEL_FORMAT_R8G8_B8G8,
+	PVRSRV_PIXEL_FORMAT_G8R8_G8B8,
+
+	
+	PVRSRV_PIXEL_FORMAT_NV11,
+	PVRSRV_PIXEL_FORMAT_NV12,
+
+	
+	PVRSRV_PIXEL_FORMAT_YUY2,
+	PVRSRV_PIXEL_FORMAT_YUV420,
+	PVRSRV_PIXEL_FORMAT_YUV444,
+	PVRSRV_PIXEL_FORMAT_VUY444,
+	PVRSRV_PIXEL_FORMAT_YUYV,
+	PVRSRV_PIXEL_FORMAT_YVYU,
+	PVRSRV_PIXEL_FORMAT_UYVY,
+	PVRSRV_PIXEL_FORMAT_VYUY,
+
+	PVRSRV_PIXEL_FORMAT_FOURCC_ORG_UYVY, 
+	PVRSRV_PIXEL_FORMAT_FOURCC_ORG_YUYV, 
+	PVRSRV_PIXEL_FORMAT_FOURCC_ORG_YVYU, 
+	PVRSRV_PIXEL_FORMAT_FOURCC_ORG_VYUY, 
+
+	
+	PVRSRV_PIXEL_FORMAT_A32B32G32R32,			
+	PVRSRV_PIXEL_FORMAT_A32B32G32R32F,		
+	PVRSRV_PIXEL_FORMAT_A32B32G32R32_UINT,	
+	PVRSRV_PIXEL_FORMAT_A32B32G32R32_SINT,	
+
+	
+	PVRSRV_PIXEL_FORMAT_B32G32R32,			
+	PVRSRV_PIXEL_FORMAT_B32G32R32F,			
+	PVRSRV_PIXEL_FORMAT_B32G32R32_UINT,		
+	PVRSRV_PIXEL_FORMAT_B32G32R32_SINT,		
+
+	
+	PVRSRV_PIXEL_FORMAT_G32R32,			
+	PVRSRV_PIXEL_FORMAT_G32R32F,			
+	PVRSRV_PIXEL_FORMAT_G32R32_UINT,		
+	PVRSRV_PIXEL_FORMAT_G32R32_SINT,		
+
+	
+	PVRSRV_PIXEL_FORMAT_D32F,			
+	PVRSRV_PIXEL_FORMAT_R32,			
+	PVRSRV_PIXEL_FORMAT_R32F,			
+	PVRSRV_PIXEL_FORMAT_R32_UINT,		
+	PVRSRV_PIXEL_FORMAT_R32_SINT,		
+
+	
+	PVRSRV_PIXEL_FORMAT_A16B16G16R16,			
+	PVRSRV_PIXEL_FORMAT_A16B16G16R16F,		
+	PVRSRV_PIXEL_FORMAT_A16B16G16R16_SINT,	
+	PVRSRV_PIXEL_FORMAT_A16B16G16R16_SNORM,	
+	PVRSRV_PIXEL_FORMAT_A16B16G16R16_UINT,	
+	PVRSRV_PIXEL_FORMAT_A16B16G16R16_UNORM,	
+
+	
+	PVRSRV_PIXEL_FORMAT_G16R16,			
+	PVRSRV_PIXEL_FORMAT_G16R16F,		
+	PVRSRV_PIXEL_FORMAT_G16R16_UINT,	
+	PVRSRV_PIXEL_FORMAT_G16R16_UNORM,	
+	PVRSRV_PIXEL_FORMAT_G16R16_SINT,	
+	PVRSRV_PIXEL_FORMAT_G16R16_SNORM,	
+
+	
+	PVRSRV_PIXEL_FORMAT_R16,			
+	PVRSRV_PIXEL_FORMAT_R16F,			
+	PVRSRV_PIXEL_FORMAT_R16_UINT,		
+	PVRSRV_PIXEL_FORMAT_R16_UNORM,		
+	PVRSRV_PIXEL_FORMAT_R16_SINT,		
+	PVRSRV_PIXEL_FORMAT_R16_SNORM,		
+
+	
+	PVRSRV_PIXEL_FORMAT_A8B8G8R8,		
+	PVRSRV_PIXEL_FORMAT_A8B8G8R8_UINT,	
+	PVRSRV_PIXEL_FORMAT_A8B8G8R8_UNORM,	
+	PVRSRV_PIXEL_FORMAT_A8B8G8R8_SINT,	
+	PVRSRV_PIXEL_FORMAT_A8B8G8R8_SNORM,	
+
+	
+	PVRSRV_PIXEL_FORMAT_G8R8,			
+	PVRSRV_PIXEL_FORMAT_G8R8_UINT,		
+	PVRSRV_PIXEL_FORMAT_G8R8_UNORM,		
+	PVRSRV_PIXEL_FORMAT_G8R8_SINT,		
+	PVRSRV_PIXEL_FORMAT_G8R8_SNORM,		
+
+	
+	PVRSRV_PIXEL_FORMAT_A8,				
+	PVRSRV_PIXEL_FORMAT_R8,				
+	PVRSRV_PIXEL_FORMAT_R8_UINT,		
+	PVRSRV_PIXEL_FORMAT_R8_UNORM,		
+	PVRSRV_PIXEL_FORMAT_R8_SINT,		
+	PVRSRV_PIXEL_FORMAT_R8_SNORM,		
+
+	
+	PVRSRV_PIXEL_FORMAT_A2B10G10R10,		
+	PVRSRV_PIXEL_FORMAT_A2B10G10R10_UNORM,	
+	PVRSRV_PIXEL_FORMAT_A2B10G10R10_UINT,	
+
+	
+	PVRSRV_PIXEL_FORMAT_B10G11R11,		
+	PVRSRV_PIXEL_FORMAT_B10G11R11F,		
+
+	
+	PVRSRV_PIXEL_FORMAT_X24G8R32,		
+	PVRSRV_PIXEL_FORMAT_G8R24,			
+	PVRSRV_PIXEL_FORMAT_E5B9G9R9,			
+	PVRSRV_PIXEL_FORMAT_R1,				
+
+	PVRSRV_PIXEL_FORMAT_BC1,			
+	PVRSRV_PIXEL_FORMAT_BC1_UNORM,		
+	PVRSRV_PIXEL_FORMAT_BC1_SRGB,		
+	PVRSRV_PIXEL_FORMAT_BC2,			
+	PVRSRV_PIXEL_FORMAT_BC2_UNORM,		
+	PVRSRV_PIXEL_FORMAT_BC2_SRGB,		
+	PVRSRV_PIXEL_FORMAT_BC3,			
+	PVRSRV_PIXEL_FORMAT_BC3_UNORM,		
+	PVRSRV_PIXEL_FORMAT_BC3_SRGB,		
+	PVRSRV_PIXEL_FORMAT_BC4,			
+	PVRSRV_PIXEL_FORMAT_BC4_UNORM,		
+	PVRSRV_PIXEL_FORMAT_BC4_SNORM,		
+	PVRSRV_PIXEL_FORMAT_BC5,			
+	PVRSRV_PIXEL_FORMAT_BC5_UNORM,
+	PVRSRV_PIXEL_FORMAT_BC5_SNORM,
+
+	PVRSRV_PIXEL_FORMAT_FORCE_I32 = 0x7fffffff,
+} PVRSRV_PIXEL_FORMAT;
+
+typedef struct BCIO_package_TAG
+{
+  int input;
+  int output;
+} BCIO_package;
+
+enum BC_memory
+{
+  BC_MEMORY_MMAP = 1,
+  BC_MEMORY_USERPTR = 2,
+};
+
+typedef struct bc_buf_params
+{
+  int count;                    /*number of buffers (in/out) */
+  int width;                    /*buffer width in pixel, multiple of 32 (in) */
+  int height;                   /*buffer height in pixel (in) */
+  PVRSRV_PIXEL_FORMAT pixel_fmt;        /*buffer pixel format (in) */
+  enum BC_memory type;          /*(in) */
+  int stride;                   /*(out) */
+  int size;                     /*(out */
+} bc_buf_params_t;
+
+#define BCIO_GID                    'g'
+#define BC_IOWR(INDEX)            _IOWR(BCIO_GID, INDEX, BCIO_package)
+
+#define BCIOGET_BUFFERCOUNT       BC_IOWR(0)
+#define BCIOGET_BUFFERPHYADDR     BC_IOWR(1)    /*get physical address by index */
+#define BCIOGET_BUFFERIDX         BC_IOWR(2)    /*get index by physical address */
+
+#define BCIOREQ_BUFFERS           BC_IOWR(3)
+#define BCIOSET_BUFFERPHYADDR     BC_IOWR(4)
+
+#endif
